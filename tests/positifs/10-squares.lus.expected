/**************************************/
/* Unsugar automatons a bit */
/**************************************/
type inductive_bool =
  | False
  | True

node main0() returns (o : int);
var n : int;
let
  (n) = add((0) -> (pre (n)), 1);
  (o) = mul(n, n);
tel

/**************************************/
/* Typed ast */
/**************************************/
type inductive_bool =
  | False
  | True

node main0__3() returns (o__1 : int)
var n__2: int;
let
  (n__2) = add(ite(true fby false, 0, 0 fby n__2), 1);
  (o__1) = mul(n__2, n__2);
tel

/**************************************/
/* Normalized ast */
/**************************************/
type inductive_bool =
  | False
  | True

node main0__3() returns (o__1 : int)
var aux'4__7: int; aux'3__6: int; aux'2__5: bool; aux'1__4: bool; n__2: int;
let
  (aux'4__7) = 0 fby aux'3__6;
  (aux'3__6) = n__2;
  (aux'2__5) = true fby aux'1__4;
  (aux'1__4) = false;
  (n__2) = add(merge aux'2__5 
                 (true -> 0 when True(aux'2__5))
                 (false -> aux'4__7 when False(aux'2__5)),
           1);
  (o__1) = mul(n__2, n__2);
tel

/**************************************/
/* Clocked ast */
/**************************************/
type inductive_bool =
  | False
  | True

node main0__3()
  returns (o__1 : int :: Base)
var aux'4__7 : int :: Base, aux'3__6 : int :: Base, aux'2__5 : bool :: Base, 
    aux'1__4 : bool :: Base, n__2 : int :: Base;
let
  (aux'4__7) = 0 fby aux'3__6;
  (aux'3__6) = n__2;
  (aux'2__5) = true fby aux'1__4;
  (aux'1__4) = false;
  (n__2) = add(merge aux'2__5 
              (true -> 0 when True(aux'2__5))
              (false -> aux'4__7 when False(aux'2__5)), 1);
  (o__1) = mul(n__2, n__2)
tel
/**************************************/
/* Scheduled ast */
/**************************************/
type inductive_bool =
  | False
  | True

node main0__3()
  returns (o__1 : int :: Base)
var aux'4__7 : int :: Base, aux'3__6 : int :: Base, aux'2__5 : bool :: Base, 
    aux'1__4 : bool :: Base, n__2 : int :: Base;
let
  (aux'1__4) = false;
  (aux'2__5) = true fby aux'1__4;
  (aux'4__7) = 0 fby aux'3__6;
  (n__2) = add(merge aux'2__5 
              (true -> 0 when True(aux'2__5))
              (false -> aux'4__7 when False(aux'2__5)), 1);
  (o__1) = mul(n__2, n__2);
  (aux'3__6) = n__2
tel
/**************************************/
/* Imp ast */
/**************************************/
type inductive_bool =
  | False
  | True

node main0__3()
  returns (o__1 : int :: Base)
var aux'4__7 : int :: Base, aux'3__6 : int :: Base, aux'2__5 : bool :: Base, 
    aux'1__4 : bool :: Base, n__2 : int :: Base;
  mem={node=[]
       fby=[aux'2_next2__9 : bool :: Base, aux'4_next1__8 : int :: Base]}
  init={node=[]
        fby=[(aux'2_next2__9,true), (aux'4_next1__8,0)]}
  compute={(aux'1__4 : bool :: Base) = false;
           (aux'2__5 : bool :: Base) = aux'2_next2__9;
           (aux'4__7 : int :: Base) = aux'4_next1__8;
           (n__2 : int :: Base) = add(case(aux'2__5)True'inductive_bool: 0;
                                                      False'inductive_bool: aux'4__7,
                                  1);
           (o__1 : int :: Base) = mul(n__2, n__2);
           (aux'3__6 : int :: Base) = n__2}
  update={(aux'2_next2__9,aux'1__4);
          (aux'4_next1__8,aux'3__6)}
  
/**************************************/
/* C file */
/**************************************/
#include <stdlib.h>

#include <printf.h>

#include <unistd.h>

#include <stdio.h>

int int_read() {
  int var;
  scanf("%d", &var);
  return var;
}

enum inductive_bool {
  FALSE,
  TRUE
};

struct main0_mem {
  int aux__2_next2;
  int aux__4_next1;
};

void main0_init (struct main0_mem* mem) {
  mem->aux__2_next2 = 1;
  mem->aux__4_next1 = 0;
}

int main0 (struct main0_mem* mem) {
  int aux__4;
  int aux__3;
  int aux__2;
  int aux__1;
  int n;
  int o;
  enum inductive_bool switch_1;
  
  aux__1 = 0;
  aux__2 = mem->aux__2_next2;
  aux__4 = mem->aux__4_next1;
  switch (aux__2) {
    case TRUE: {
      switch_1 = 0;
      break;
    }
    case FALSE: {
      switch_1 = aux__4;
      break;
    }
  };
  n = (switch_1 + 1);
  o = (n * n);
  aux__3 = n;
  mem->aux__2_next2 = aux__1;
  mem->aux__4_next1 = aux__3;
  return o;
}

int main (int argc, char* argv[]) {
  struct main0_mem mem;
  int res;
  
  main0_init(&(mem));
  while (1) {
    res = main0(&(mem));
    printf("%d\n", res);
    fflush(0);
    usleep(333333);
  };
}
