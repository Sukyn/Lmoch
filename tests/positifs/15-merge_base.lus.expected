/**************************************/
/* Unsugar automatons a bit */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0() returns (o : int);
var tmp : t;
let
  (tmp) = (A't) -> (pre (merge tmp 
                           (A't -> B't when A(tmp))
                           (B't -> A't when B(tmp))));
  (o) = (0) -> (merge tmp 
                  (A't -> pre (o))
                  (B't -> add(pre (o), 1)));
tel

/**************************************/
/* Typed ast */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__3() returns (o__1 : int)
var tmp__2: t;
let
  (tmp__2) = ite(true fby false, A't,
             default(t) fby merge tmp__2 
                              (A't -> B't when A(tmp__2))
                              (B't -> A't when B(tmp__2)));
  (o__1) = ite(true fby false, 0,
           merge tmp__2 
             (A't -> 0 fby o__1)
             (B't -> add(0 fby o__1, 1)));
tel

/**************************************/
/* Normalized ast */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__3() returns (o__1 : int)
var aux'10__13: int; aux'9__12: int; aux'8__11: int; aux'7__10: int;
    aux'6__9: bool; aux'5__8: bool; aux'4__7: t; aux'3__6: t; aux'2__5: bool;
    aux'1__4: bool; tmp__2: t;
let
  (aux'4__7) = default(t) fby aux'3__6;
  (aux'3__6) = merge tmp__2 
                 (A't -> B't when A(tmp__2))
                 (B't -> A't when B(tmp__2));
  (aux'2__5) = true fby aux'1__4;
  (aux'1__4) = false;
  (tmp__2) = merge aux'2__5 
               (true -> A't when True(aux'2__5))
               (false -> aux'4__7 when False(aux'2__5));
  (aux'10__13) = 0 fby aux'9__12;
  (aux'9__12) = o__1;
  (aux'8__11) = 0 fby aux'7__10;
  (aux'7__10) = o__1;
  (aux'6__9) = true fby aux'5__8;
  (aux'5__8) = false;
  (o__1) = merge aux'6__9 
             (true -> 0 when True(aux'6__9))
             (false -> merge tmp__2 
                         (A't -> aux'8__11)
                         (B't -> add(aux'10__13, 1)) when False(aux'6__9));
tel

/**************************************/
/* Clocked ast */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__3()
  returns (o__1 : int :: Base)
var aux'10__13 : int :: Base, aux'9__12 : int :: Base, aux'8__11 : int :: Base, 
    aux'7__10 : int :: Base, aux'6__9 : bool :: Base, aux'5__8 : bool :: Base, 
    aux'4__7 : t :: Base, aux'3__6 : t :: Base, aux'2__5 : bool :: Base, 
    aux'1__4 : bool :: Base, tmp__2 : t :: Base;
let
  (aux'4__7) = default(t) fby aux'3__6;
  (aux'3__6) = merge tmp__2 
               (A't -> B't when A(tmp__2))
               (B't -> A't when B(tmp__2));
  (aux'2__5) = true fby aux'1__4;
  (aux'1__4) = false;
  (tmp__2) = merge aux'2__5 
             (true -> A't when True(aux'2__5))
             (false -> aux'4__7 when False(aux'2__5));
  (aux'10__13) = 0 fby aux'9__12;
  (aux'9__12) = o__1;
  (aux'8__11) = 0 fby aux'7__10;
  (aux'7__10) = o__1;
  (aux'6__9) = true fby aux'5__8;
  (aux'5__8) = false;
  (o__1) = merge aux'6__9 
           (true -> 0 when True(aux'6__9))
           (false -> merge tmp__2 
           (A't -> aux'8__11)
           (B't -> add(aux'10__13, 1)) when False(aux'6__9))
tel
/**************************************/
/* Scheduled ast */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__3()
  returns (o__1 : int :: Base)
var aux'10__13 : int :: Base, aux'9__12 : int :: Base, aux'8__11 : int :: Base, 
    aux'7__10 : int :: Base, aux'6__9 : bool :: Base, aux'5__8 : bool :: Base, 
    aux'4__7 : t :: Base, aux'3__6 : t :: Base, aux'2__5 : bool :: Base, 
    aux'1__4 : bool :: Base, tmp__2 : t :: Base;
let
  (aux'1__4) = false;
  (aux'2__5) = true fby aux'1__4;
  (aux'4__7) = default(t) fby aux'3__6;
  (aux'5__8) = false;
  (aux'6__9) = true fby aux'5__8;
  (aux'8__11) = 0 fby aux'7__10;
  (aux'10__13) = 0 fby aux'9__12;
  (tmp__2) = merge aux'2__5 
             (true -> A't when True(aux'2__5))
             (false -> aux'4__7 when False(aux'2__5));
  (o__1) = merge aux'6__9 
           (true -> 0 when True(aux'6__9))
           (false -> merge tmp__2 
           (A't -> aux'8__11)
           (B't -> add(aux'10__13, 1)) when False(aux'6__9));
  (aux'3__6) = merge tmp__2 
               (A't -> B't when A(tmp__2))
               (B't -> A't when B(tmp__2));
  (aux'7__10) = o__1;
  (aux'9__12) = o__1
tel
/**************************************/
/* Imp ast */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__3()
  returns (o__1 : int :: Base)
var aux'10__13 : int :: Base, aux'9__12 : int :: Base, aux'8__11 : int :: Base, 
    aux'7__10 : int :: Base, aux'6__9 : bool :: Base, aux'5__8 : bool :: Base, 
    aux'4__7 : t :: Base, aux'3__6 : t :: Base, aux'2__5 : bool :: Base, 
    aux'1__4 : bool :: Base, tmp__2 : t :: Base;
  mem={node=[]
       fby=[aux'2_next5__18 : bool :: Base, aux'4_next4__17 : t :: Base, 
            aux'6_next3__16 : bool :: Base, aux'8_next2__15 : int :: Base, 
            aux'10_next1__14 : int :: Base]}
  init={node=[]
        fby=[(aux'2_next5__18,true), (aux'4_next4__17,default(t)), (aux'6_next3__16,true), (aux'8_next2__15,0), (aux'10_next1__14,0)]}
  compute={(aux'1__4 : bool :: Base) = false;
           (aux'2__5 : bool :: Base) = aux'2_next5__18;
           (aux'4__7 : t :: Base) = aux'4_next4__17;
           (aux'5__8 : bool :: Base) = false;
           (aux'6__9 : bool :: Base) = aux'6_next3__16;
           (aux'8__11 : int :: Base) = aux'8_next2__15;
           (aux'10__13 : int :: Base) = aux'10_next1__14;
           (tmp__2 : t :: Base) = case(aux'2__5)True'inductive_bool: A't;
                                                  False'inductive_bool: aux'4__7;
           (o__1 : int :: Base) = case(aux'6__9)True'inductive_bool: 0;
                                                  False'inductive_bool: case(tmp__2)
                                                  A't: aux'8__11;
                                                    B't: add(aux'10__13, 1);
           (aux'3__6 : t :: Base) = case(tmp__2)A't: B't;
                                                  B't: A't;
           (aux'7__10 : int :: Base) = o__1;
           (aux'9__12 : int :: Base) = o__1}
  update={(aux'2_next5__18,aux'1__4);
          (aux'4_next4__17,aux'3__6);
          (aux'6_next3__16,aux'5__8);
          (aux'8_next2__15,aux'7__10);
          (aux'10_next1__14,aux'9__12)}
  
/**************************************/
/* C file */
/**************************************/
#include <stdlib.h>

#include <printf.h>

#include <unistd.h>

#include <stdio.h>

int int_read() {
  int var;
  scanf("%d", &var);
  return var;
}

enum inductive_bool {
  FALSE,
  TRUE
};

enum t {
  A,
  B
};

struct main0_mem {

  int aux__2_next5;
  enum t aux__4_next4;
  int aux__6_next3;
  int aux__8_next2;
  int aux__10_next1;
};

void main0_init (struct main0_mem* mem) {
  mem->aux__2_next5 = 1;
  mem->aux__4_next4 = A;
  mem->aux__6_next3 = 1;
  mem->aux__8_next2 = 0;
  mem->aux__10_next1 = 0;
}

int main0 (struct main0_mem* mem) {
  int aux__10;
  int aux__9;
  int aux__8;
  int aux__7;
  int aux__6;
  int aux__5;
  enum t aux__4;
  enum t aux__3;
  int aux__2;
  int aux__1;
  enum t tmp;
  int o;
  enum inductive_bool switch_1;
  enum inductive_bool switch_2;
  enum t switch_3;
  enum t switch_4;
  
  aux__1 = 0;
  aux__2 = mem->aux__2_next5;
  aux__4 = mem->aux__4_next4;
  aux__5 = 0;
  aux__6 = mem->aux__6_next3;
  aux__8 = mem->aux__8_next2;
  aux__10 = mem->aux__10_next1;
  switch (aux__2) {
    case TRUE: {
      switch_1 = A;
      break;
    }
    case FALSE: {
      switch_1 = aux__4;
      break;
    }
  };
  tmp = switch_1;
  switch (tmp) {
    case A: {
      switch_3 = aux__8;
      break;
    }
    case B: {
      switch_3 = (aux__10 + 1);
      break;
    }
  };
  switch (aux__6) {
    case TRUE: {
      switch_2 = 0;
      break;
    }
    case FALSE: {
      switch_2 = switch_3;
      break;
    }
  };
  o = switch_2;
  switch (tmp) {
    case A: {
      switch_4 = B;
      break;
    }
    case B: {
      switch_4 = A;
      break;
    }
  };
  aux__3 = switch_4;
  aux__7 = o;
  aux__9 = o;
  mem->aux__2_next5 = aux__1;
  mem->aux__4_next4 = aux__3;
  mem->aux__6_next3 = aux__5;
  mem->aux__8_next2 = aux__7;
  mem->aux__10_next1 = aux__9;
  return o;
}

int main (int argc, char* argv[]) {
  struct main0_mem mem;
  int res;
  
  main0_init(&(mem));
  while (1) {
    res = main0(&(mem));
    printf("%d\n", res);
    fflush(0);
    usleep(333333);
  };
}
